using Debricked.Models.Constants;
using Debricked.Models.DebrickedApi;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Windows.Media;

namespace Debricked.Models
{
    internal class Vulnerability
    {
        public int Id { get; set; }

        public String CveId { get; set; }

        public decimal Cvss { get; set; }

        [JsonIgnore]
        public Brush CvssBrush { get { return getCvssColor(); } }

        public bool IsDisputed { get; set; }

        public bool IsRootFixAvailable { get; set; } = false;

        public bool IsDirectFixAvailable { get; set; } = false;

        [JsonIgnore]
        public Brush RootFixStatusBrush { get { return IsRootFixAvailable ? Brushes.Green : Brushes.Red; } }

        [JsonIgnore]
        public Brush DirectFixStatusBrush { get { return IsDirectFixAvailable ? Brushes.Green : Brushes.Red; } }

        public DateTime Discovered { get; set; }

        public String UsesVulnerableFunctionality { get; set; }

        public VulnerabilityStatusEnum VulnerabilityStatus { get; set; }

        [JsonIgnore]
        public String VulnerabilityStatusString { get { return Enum.GetName(typeof(VulnerabilityStatusEnum), VulnerabilityStatus); } }

        public String Link { get; set; }

        public HashSet<int> DependenciesIds { get; set; } = new HashSet<int>();

        public HashSet<String> DependenciesNames { get; set; } = new HashSet<String>();

        public Dictionary<String, HashSet<DebrickedVulnTimeLineInterval>> VulnerabilityTimelineIntervals { get; set; } = new Dictionary<string, HashSet<DebrickedVulnTimeLineInterval>>();

        public List<DebrickedDependencyTreeNode> Trees { get; set; } = new List<DebrickedDependencyTreeNode>();

        public List<DebrickedVulnRefSummary> RefSummaries { get; set; } = new List<DebrickedVulnRefSummary>();

        [JsonIgnore]
        public String Details { get {  return "Affected dependencies: \r\n- " + String.Join("\r\n- ", DependenciesNames); } }

        private Brush getCvssColor()
        {
            if (this.Cvss <= 3.9M)
            {
                return Brushes.Green;
            } else if(this.Cvss <= 6.9M)
            {
                return Brushes.Yellow;
            }
            else if (this.Cvss <= 8.9M)
            {
                return Brushes.Orange;
            }
            else
            {
                return Brushes.Red;
            }
        }
    }
}
